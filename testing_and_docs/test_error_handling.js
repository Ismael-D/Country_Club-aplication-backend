import fetch from 'node-fetch'

const BASE_URL = 'http://localhost:3000/api/v1'

async function testErrorScenario(description, method, endpoint, data = null, token = null) {
  const options = {
    method,
    headers: {
      'Content-Type': 'application/json',
      ...(token && { 'Authorization': `Bearer ${token}` })
    },
    ...(data && { body: JSON.stringify(data) })
  }

  try {
    const response = await fetch(`${BASE_URL}${endpoint}`, options)
    const result = await response.json()
    
    console.log(`\nüîç ${description}`)
    console.log(`   ${method} ${endpoint}`)
    console.log(`   Status: ${response.status}`)
    console.log(`   Response:`, result)
    
    return { status: response.status, data: result }
  } catch (error) {
    console.log(`\nüîç ${description}`)
    console.log(`   ${method} ${endpoint}`)
    console.log(`   ‚ùå Network Error:`, error.message)
    return { status: 0, data: null }
  }
}

async function testAllErrorScenarios() {
  console.log('üß™ Testing Comprehensive Error Handling\n')
  console.log('=' * 60)

  // 1. JSON Parsing Errors
  console.log('\nüìù 1. JSON Parsing Errors')
  await testErrorScenario(
    'Malformed JSON - missing quotes',
    'POST',
    '/auth/register',
    '{first_name: "Test", email: "test@example.com"}'
  )
  
  await testErrorScenario(
    'Malformed JSON - missing comma',
    'POST',
    '/auth/register',
    '{"first_name": "Test" "email": "test@example.com"}'
  )

  // 2. Validation Errors (Zod)
  console.log('\nüìù 2. Validation Errors (Zod)')
  await testErrorScenario(
    'Missing required fields',
    'POST',
    '/auth/register',
    { first_name: 'Test' }
  )
  
  await testErrorScenario(
    'Invalid email format',
    'POST',
    '/auth/register',
    { 
      first_name: 'Test',
      last_name: 'User',
      email: 'invalid-email',
      phone: '555-1234',
      DNI: 12345678,
      password: 'password123'
    }
  )
  
  await testErrorScenario(
    'Invalid DNI (string instead of number)',
    'POST',
    '/auth/register',
    { 
      first_name: 'Test',
      last_name: 'User',
      email: 'test@example.com',
      phone: '555-1234',
      DNI: 'not-a-number',
      password: 'password123'
    }
  )

  // 3. Authentication Errors (JWT)
  console.log('\nüìù 3. Authentication Errors (JWT)')
  await testErrorScenario(
    'Missing token',
    'GET',
    '/users/profile'
  )
  
  await testErrorScenario(
    'Invalid token format',
    'GET',
    '/users/profile',
    null,
    'invalid-token'
  )
  
  await testErrorScenario(
    'Malformed token',
    'GET',
    '/users/profile',
    null,
    'Bearer invalid.jwt.token'
  )

  // 4. Authorization Errors
  console.log('\nüìù 4. Authorization Errors')
  // First create a user to get a valid token
  const userData = {
    first_name: 'Test',
    last_name: 'User',
    email: 'testauth@example.com',
    phone: '555-1234',
    DNI: 99999999,
    password: 'password123',
    role_id: 3
  }
  
  const registerResult = await testErrorScenario(
    'Register user for auth test',
    'POST',
    '/auth/register',
    userData
  )
  
  if (registerResult.data?.ok) {
    const token = registerResult.data.msg.token
    
    await testErrorScenario(
      'Access admin endpoint with non-admin user',
      'GET',
      '/users',
      null,
      token
    )
    
    await testErrorScenario(
      'Delete user with non-admin user',
      'DELETE',
      '/users/1',
      null,
      token
    )
  }

  // 5. Parameter Validation Errors
  console.log('\nüìù 5. Parameter Validation Errors')
  await testErrorScenario(
    'Invalid ID format (string)',
    'GET',
    '/members/abc',
    null,
    'valid-token'
  )
  
  await testErrorScenario(
    'Invalid ID format (negative)',
    'GET',
    '/members/-1'
  )
  
  await testErrorScenario(
    'Invalid ID format (decimal)',
    'GET',
    '/events/1.5'
  )

  // 6. Database Constraint Errors
  console.log('\nüìù 6. Database Constraint Errors')
  const duplicateUser = {
    first_name: 'Duplicate',
    last_name: 'User',
    email: 'duplicate@example.com',
    phone: '555-1234',
    DNI: 12345678, // This DNI already exists
    password: 'password123'
  }
  
  await testErrorScenario(
    'Duplicate DNI (unique constraint violation)',
    'POST',
    '/auth/register',
    duplicateUser
  )

  // 7. Not Found Errors
  console.log('\nüìù 7. Not Found Errors')
  await testErrorScenario(
    'Non-existent user',
    'GET',
    '/users/999999'
  )
  
  await testErrorScenario(
    'Non-existent member',
    'GET',
    '/members/999999'
  )
  
  await testErrorScenario(
    'Non-existent event',
    'GET',
    '/events/999999'
  )

  // 8. Method Not Allowed
  console.log('\nüìù 8. Method Not Allowed')
  await testErrorScenario(
    'PUT on collection endpoint',
    'PUT',
    '/users'
  )
  
  await testErrorScenario(
    'DELETE on collection endpoint',
    'DELETE',
    '/members'
  )

  // 9. Invalid Routes
  console.log('\nüìù 9. Invalid Routes')
  await testErrorScenario(
    'Non-existent route',
    'GET',
    '/api/v1/nonexistent'
  )
  
  await testErrorScenario(
    'Invalid API version',
    'GET',
    '/api/v2/users'
  )

  console.log('\n' + '=' * 60)
  console.log('üèÅ Error handling tests completed!')
  console.log('\n‚úÖ All error scenarios have been tested')
  console.log('‚úÖ Each error returns appropriate HTTP status codes')
  console.log('‚úÖ Error messages are clear and descriptive')
  console.log('‚úÖ No sensitive information is exposed in error responses')
}

// Run tests
testAllErrorScenarios().catch(console.error) 